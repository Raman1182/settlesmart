import type { User, Group, Expense } from './types';

// More realistic user data
export const users: User[] = [
  { id: 'user1', name: 'You', avatar: 'https://placehold.co/100x100/64748b/ffffff.png', initials: 'U' },
  { id: 'user2', name: 'Alex', avatar: 'https://placehold.co/100x100/ec4899/ffffff.png', initials: 'A' },
  { id: 'user3', name: 'Ben', avatar: 'https://placehold.co/100x100/8b5cf6/ffffff.png', initials: 'B' },
  { id: 'user4', name: 'Chloe', avatar: 'https://placehold.co/100x100/14b8a6/ffffff.png', initials: 'C' },
  { id: 'user5', name: 'David', avatar: 'https://placehold.co/100x100/f59e0b/ffffff.png', initials: 'D' },
];

export const groups: Group[] = [
  {
    id: 'group1',
    name: 'Homemates',
    members: ['user1', 'user2', 'user3'],
  },
  {
    id: 'group2',
    name: 'Vacation Crew',
    members: ['user1', 'user2', 'user4', 'user5'],
  },
   {
    id: 'group3',
    name: 'Work Lunch',
    members: ['user1', 'user3', 'user4'],
  },
];

// Expanded and more varied expense data
export const expenses: Expense[] = [
  // Older expenses
  {
    id: 'exp10',
    description: 'Concert Tickets',
    amount: 220,
    category: 'Entertainment',
    paidById: 'user4',
    splitWith: ['user1', 'user2', 'user4', 'user5'],
    date: new Date(new Date().setMonth(new Date().getMonth() - 2, 15)).toISOString(),
    groupId: 'group2',
  },
  {
    id: 'exp11',
    description: 'Electricity Bill',
    amount: 75.50,
    category: 'Utilities',
    paidById: 'user2',
    splitWith: ['user1', 'user2', 'user3'],
    date: new Date(new Date().setMonth(new Date().getMonth() - 2, 10)).toISOString(),
    groupId: 'group1',
  },
   {
    id: 'exp12',
    description: 'Last Month Rent',
    amount: 1500,
    category: 'Rent',
    paidById: 'user1',
    splitWith: ['user1', 'user2', 'user3'],
    date: new Date(new Date().setMonth(new Date().getMonth() - 1, 1)).toISOString(),
    groupId: 'group1',
  },
  {
    id: 'exp13',
    description: 'Team Lunch',
    amount: 85,
    category: 'Food & Drink',
    paidById: 'user3',
    splitWith: ['user1', 'user3', 'user4'],
    date: new Date(new Date().setMonth(new Date().getMonth() - 1, 20)).toISOString(),
    groupId: 'group3',
  },

  // Recent expenses
  {
    id: 'exp1',
    description: 'Monthly Rent',
    amount: 1500,
    category: 'Rent',
    paidById: 'user1',
    splitWith: ['user1', 'user2', 'user3'],
    date: new Date(new Date().setDate(1)).toISOString(),
    groupId: 'group1',
  },
  {
    id: 'exp2',
    description: 'Weekly Groceries',
    amount: 180.75,
    category: 'Groceries',
    paidById: 'user2',
    splitWith: ['user1', 'user2', 'user3'],
    date: new Date(new Date().setDate(new Date().getDate() - 2)).toISOString(),
    groupId: 'group1',
  },
  {
    id: 'exp3',
    description: 'Internet & Cable',
    amount: 89.99,
    category: 'Utilities',
    paidById: 'user3',
    splitWith: ['user1', 'user2', 'user3'],
    date: new Date(new Date().setDate(new Date().getDate() - 5)).toISOString(),
    groupId: 'group1',
  },
  {
    id: 'exp4',
    description: 'Fuel for Trip',
    amount: 65,
    category: 'Travel',
    paidById: 'user1',
    splitWith: ['user1', 'user2', 'user4', 'user5'],
    date: new Date(new Date().setDate(new Date().getDate() - 10)).toISOString(),
    groupId: 'group2',
  },
  {
    id: 'exp5',
    description: 'Airbnb Booking',
    amount: 850,
    category: 'Travel',
    paidById: 'user4',
    splitWith: ['user1', 'user2', 'user4', 'user5'],
    date: new Date(new Date().setDate(new Date().getDate() - 12)).toISOString(),
    groupId: 'group2',
  },
  {
    id: 'exp6',
    description: 'Movie Night',
    amount: 52.50,
    category: 'Entertainment',
    paidById: 'user2',
    splitWith: ['user1', 'user2', 'user5'],
    date: new Date(new Date().setDate(new Date().getDate() - 3)).toISOString(),
    groupId: 'group2',
  },
  {
    id: 'exp7',
    description: 'Birthday Dinner',
    amount: 120,
    category: 'Food & Drink',
    paidById: 'user1',
    splitWith: ['user1', 'user2', 'user3'],
    date: new Date(new Date().setDate(new Date().getDate() - 8)).toISOString(),
    groupId: 'group1',
  },
  {
    id: 'exp8',
    description: 'Pizza Takeout',
    amount: 45,
    category: 'Food & Drink',
    paidById: 'user3',
    splitWith: ['user1', 'user3', 'user4'],
    date: new Date(new Date().setDate(new Date().getDate() - 1)).toISOString(),
    groupId: 'group3',
  },
  {
    id: 'exp9',
    description: 'New Coffee Machine',
    amount: 95,
    category: 'Shopping',
    paidById: 'user1',
    splitWith: ['user1', 'user2', 'user3'],
    date: new Date(new Date().setDate(new Date().getDate() - 15)).toISOString(),
    groupId: 'group1',
  },
].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
